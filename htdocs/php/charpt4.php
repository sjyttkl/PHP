<?php
   echo "<p>----------------------------------基本语法-----------------------------------------------";
   class Person
   {
     public $name;
	 private $age;
	 
	 function Person($name,$age)
	 {
		 $this->name = $name;
		 $this->age = $age;
	 }
	 
	 function getInfo()
	 {
		 //在 PHP 中，只有一个字符串运算符。并置运算符 (.) 用于把两个字符串值连接起来。
		 echo '我叫'.$this->name.'<br>我今年'.$this->age.'岁了';
	 }
   }
	
	$gril = new Person('小冬',21);
	$gril->getInfo();
	
	
	echo "<p>----------------------------------资源类型-----------------------------------------------";
	$var1 = NULL;//变量var1被赋值null
	$var2 = '小冬';
	echo $var1."<p>::".$var2;
	unset($var2);//用unset()函数删除后其值为null
	echo $var1."<p>::".$var2;
	echo "<p>---------------------------------强制类型转换-----------------------------------------------";
	$temp_var = 3.1415926;
	$var1 = (string)$temp_var;
	echo"<p>$var1";
	$temp_var='沫沫';
	$var2 = (array)$temp_var;
	echo"<p>";
	print_r($var2);
	echo"<p>";
	var_dump($var2);
	$temp_var = "小冬，晏姝";
	$var3=(unset)$temp_var;
	echo"<p>";
	var_dump($var3);
	echo "<p>---------------------------------强制类型转换另外一种方式 settype-----------------------------------------------";
	//bool settypet(mixed $var,string $type);
	
	$var = "小冬";
	echo "<p>转换前为 :";
	print_r($var);
	
	settype($var,'array');
	echo'<p>转换后为：';
	print_r($var);
	echo "<p>---------------------------------常量和变量-----------------------------------------------";
	// bool define(string $constant_name,mixed $value,bool $case_insensitive=false); $constant_name 常量名称，一搬为大写，$value 表示常量值，$case_insensitive 大小写敏感
	  
	 define('MY_NAME',"xiaodong");
	 define("MY_AGE",21);
	 define("MY_HOBY","看小说的时候睡");
	 echo "<p>我是".MY_NAME."年方".MY_AGE."爱好是：".MY_HOBY;
	 echo "<p>---------------------------------魔术常量-----------------------------------------------";
	 
	 function sayHello()
	 {
		 echo'<p> 函数名字：'._FUNCTION_.'行';
	 }
	
	echo '<p>这是第'._LINE_.'行';
	echo'<p>本文件的绝对路径为：'._FILE_;
	sayHello();
	echo "<p>---------------------------------变量的定义和赋值-----------------------------------------------";
	//重点是引用变量
	$name='沫沫';
	$nick_name= &$name;
	echo'<p> $name:  '.$name;
	echo'<p>$nick_name:'.$nick_name;
	echo "<p>---------------------------------预定义变量 $_COOKIE----------------------------------------------";
	echo "<p>-----------------------------表达式与运算符----------------------------------------------";
	
	$a = 12;
	$b = 5;
	echo"-$a=".(-$a).'<br>';
	echo"$a+$b ".($a-$b).'<br>';
	echo"$a-$b=".($a-$b).'<br>';
	echo"$a*$b=".($a*$b).'<br>';
	echo"$a/$b=".($a/$b).'<br>';
	echo "<p>-----------------------------赋值运算符----------------------------------------------";	
	$a = 12;
	$a+=5;
	echo'<p>$a= '.$a.'<br>';
	$a = 12;
	$a-=5;
	echo'<p>$a= '.$a.'<br>';
	
	$a = 12;
	$a*=5;
	echo'<p>$a= '.$a.'<br>';
	
	$a = 12;
	$a/=5;
	echo'<p>$a= '.$a.'<br>';
	
	$a = 12;
	$a%=5;
	echo'<p>$a= '.$a.'<br>';
	echo "<p>-----------------------------逻辑运算符----------------------------------------------";	
	
	$a = true;
	$b = false;
	
	var_dump($a&&b);
	echo'<br>';
	var_dump($a||b);
	echo'<br>';
	var_dump($a xor b);
	echo'<br>';
	var_dump(!$a);
	echo'<br>';

	echo "<p>-----------------------------比较运算符----------------------------------------------";	
	
	$a = 3.14;
	$b = 4.13;
	echo'<br>';
	var_dump($a<$b);echo'<br>';
	var_dump($a>$b);echo'<br>';
	var_dump($a<=$b);echo'<br>';
	var_dump($a>=$b);echo'<br>';
	
	$a = 1;
	$b = 1.0;
	
	var_dump($a==$b);echo'<br>';
	var_dump($a===$b);echo'<br>';//全等，$a的值等于$b的值，且$a与$b的类型也相等。
	var_dump($a!=$b);echo'<br>';
	var_dump($a!==$b);echo'<br>';//当$a的值等于$b的值，且$a与$b的类型不相等。
	
	
	echo "<p>-----------------------------位运算符----------------------------------------------";	
	$a = 123;
	$b = 321;
	echo '$a & $b='.($a &$b).'<br>';
	echo'$a | $b='.($a |$b).'<br>';
	echo'$a ^ $b='.($a ^$b).'<br>';
	echo'~$a ='.(~$a).'<br>';
	echo'$a >>4='.($a >>4).'<br>';
	echo'$a <<4='.($a <<4).'<br>';
	echo "<p>-----------------------------递增递减运算符----------------------------------------------";	
	
	$a =5;
	$b=++$a;
	echo'$b='.$b.'<br>';
	
	$a =5;
	$b =$a++;
	echo'$b='.$b.'<br>';
	
	$a =5;
	$b= --$a;
	echo'$b='.$b.'<br>';
	
	$a =5;
	$b=$a--;
	echo'$b='.$b.'<br>';
	
echo "<p>-----------------------------三元运算符----------------------------------------------";	
 
 $now = '11:59';
 echo $now=='12:00'?'时辰已到，该吃饭了':'时辰尚早，再忍忍吧。。。';
	
echo "<p>-----------------------------字符串运算符----------------------------------------------";		
$a = "默默";
$b = "是一个";
$c = "古灵精怪";
$d = "女孩";
$e=20;
$f = $a.$b.$c.$d.$e;
$g ="  中国人民来了";
$f.=$g;
echo "<p>". $f;
echo "<p>---------------php提供花括号{}分隔符--------------------------";
$h="请叫我";
$i=" php";
$j="{$h}{$i}";
echo "<p>".$j;
echo "<p>---------------数组运算符--------------------------<br>";

$a=array('name'=>'琳琳','age'=>22);
$b=array('name'=>'默默','age'=>19,'hobby'=>'看小说的时候睡');
$c=array('age'=>18,'name'=>'xiaodong','hobby'=>'看小说的时候睡');

$ab= $a+$b;//将$b的元素加到$a后面，重复的元素不被覆盖
print_r($ab);
echo'<br>';
$ba = $b+$a;
print_r($ba);
echo'<br>';

var_dump($b==$c);//当$a与$b拥有相同的键值对，返回真，否则返回假
echo'<br>';
var_dump($b===$c);//当$a与$b拥有相同的键值对，且元素的顺序和类型都要相等返回真。
echo'<br>';
var_dump($b!=$c);//当$a与$b拥有相同的键值对，返回假，否则返回真
echo'<br>';
var_dump($b!==$c);//当$a与$b拥有相同的键值对，且元素的顺序和类型都要相等返回假。
echo'<br>';	
echo "<p>---------------类型运算符--------------------------<br>";
  class A
  {
	
  }
  class B
  {
	  
  }
	$myclass = new A;
	var_dump(($myclass instanceof A));echo'<br>';
	var_dump(($myclass instanceof C));echo'<br>';
	//类型运算符还可以用来确定某一变量是否是继承自某一个父类的子类的实例，也可以用来确定某一变量是否实现了某个接口的对象的实例
echo "<p>---------------错误控制运算符--------------------------<br>";
 

$error = 9/0;
//错误控制符，用@表示，将其放在出错的表达式前，可以屏蔽出现的错误信息，但是这是一种”掩耳盗铃的”的方法，因为bug没有解决，还是在那里，只是没有显示出来而已
//因此，除了一些不影响程序运行的小错误，为了屏蔽可能影响用户体验的出错信息，可以使用@屏蔽该错误，否则不推荐使用改运算符。
@$erro=9/0;//这样就屏蔽错误了，但是错误，并没有改掉。











	
?>